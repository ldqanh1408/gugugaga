import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { getPayLoad } from "../../services/authService";
import { addFutureMail } from "../../services/userService";
import "./ExploreYourselfPage.css";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

const ExploreYourselfPage = () => {
  const [activeTab, setActiveTab] = useState("statistics");
  const [mailContent, setMailContent] = useState("");
  const [sendDate, setSendDate] = useState("");
  const [timeRange, setTimeRange] = useState("today");
  const [futureMails, setFutureMails] = useState([]);
  const [selectedDuration, setSelectedDuration] = useState("3 months");
  const navigate = useNavigate();

  const generateMinuteData = (minutes) => {
    return Array.from({ length: minutes }, (_, index) => ({
      name: `${index} ph√∫t`,
      value: Math.floor(Math.random() * 5) + 1, // Random value between 1 and 5
    }));
  };

  const emotionData = {
    today: {
      lineChart: generateMinuteData(60), // 60 minutes of data
      pieChart: [30, 10, 20, 25, 15],
    },
    week: {
      lineChart: generateMinuteData(60 * 7), // 7 days of minute data
      pieChart: [35, 15, 15, 20, 15],
    },
    month: {
      lineChart: generateMinuteData(60 * 30), // 30 days of minute data
      pieChart: [40, 10, 10, 25, 15],
    },
    year: {
      lineChart: generateMinuteData(60 * 24 * 365), // 1 year of minute data
      pieChart: [45, 5, 10, 25, 15],
    },
  };

  // Load saved mails from localStorage
  useEffect(() => {
    const savedMails = JSON.parse(localStorage.getItem("futureMails")) || [];
    setFutureMails(savedMails);
  }, []);

  // Check for due mails periodically
  useEffect(() => {
    const checkMails = () => {
      const now = new Date().toISOString().split("T")[0];
      const pendingMails = futureMails.filter(
        (mail) => mail.receiveDate === now && !mail.notified
      );

      // Update to show a detailed alert for past mails
      if (pendingMails.length > 0) {
        const firstMail = pendingMails[0];
        const formattedSendDate = firstMail.sendDate.split("T")[0]; // Extract only the date part
        const formattedReceiveDate = firstMail.receiveDate; // Already in YYYY-MM-DD format

        const userConfirmed = window.confirm(
          `üì® Th∆∞ t·ª´ qu√° kh·ª© ƒë√£ ƒë·∫øn!\n\nN·ªôi dung: ${firstMail.title}\nNg√†y g·ª≠i: ${formattedSendDate}\nNg√†y nh·∫≠n: ${formattedReceiveDate}\n\nCh√∫c b·∫°n tr·∫£i nghi·ªám vui v·∫ª ü•∞‚ú®`
        );
        if (userConfirmed) {
          navigate("/today-mails", { state: { mail: firstMail } });
        }

        // Mark all mails as notified
        const updatedMails = futureMails.map((mail) =>
          pendingMails.find((m) => m.id === mail.id)
            ? { ...mail, notified: true }
            : mail
        );
        setFutureMails(updatedMails);
        localStorage.setItem("futureMails", JSON.stringify(updatedMails));
      }
    };

    // Ki·ªÉm tra ngay khi component mount
    checkMails();

    // Ki·ªÉm tra m·ªói ph√∫t
    const interval = setInterval(checkMails, 60000);
    return () => clearInterval(interval);
  }, [futureMails, navigate]);

  const handleSendMail = async () => {
    if (!mailContent || !sendDate) {
      alert("Vui l√≤ng nh·∫≠p n·ªôi dung v√† ch·ªçn ng√†y g·ª≠i");
      return;
    }

    // ƒê·∫∑t gi·ªù v·ªÅ 00:00:00 ƒë·ªÉ so s√°nh ch√≠nh x√°c ng√†y
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const todayString = today.toISOString().split("T")[0];

    const selectedDate = new Date(sendDate);
    selectedDate.setHours(0, 0, 0, 0);

    // Ki·ªÉm tra n·∫øu ch·ªçn ng√†y trong qu√° kh·ª©
    if (selectedDate < today) {
      alert("Kh√¥ng th·ªÉ g·ª≠i th∆∞ cho ng√†y trong qu√° kh·ª©!");
      return;
    }

    // Ki·ªÉm tra gi·ªõi h·∫°n 30 ng√†y
    const maxDate = new Date(today);
    maxDate.setDate(today.getDate() + 30);
    if (selectedDate > maxDate) {
      alert("B·∫°n ch·ªâ c√≥ th·ªÉ g·ª≠i th∆∞ trong v√≤ng 30 ng√†y k·ªÉ t·ª´ h√¥m nay.");
      return;
    }

    try {
      const payload = await getPayLoad();
      const now = new Date();
      const sendDateTime = now.toISOString(); // Use the exact current date and time

      const newMail = {
        id: Date.now(),
        title:
          mailContent.substring(0, 30) + (mailContent.length > 30 ? "..." : ""),
        content: mailContent,
        sendDate: sendDateTime, // Updated to use the exact current time
        receiveDate: sendDate,
        notified: false,
        read: false,
      };

      // L∆∞u v√†o backend
      if (payload?.userId) {
        await addFutureMail(payload.userId, newMail);
      }

      // L∆∞u v√†o localStorage
      const savedMails = JSON.parse(localStorage.getItem("futureMails")) || [];
      const updatedMails = [...savedMails, newMail];
      localStorage.setItem("futureMails", JSON.stringify(updatedMails));
      setFutureMails(updatedMails);

      // Reset form
      setMailContent("");
      setSendDate("");

      // Hi·ªÉn th·ªã th√¥ng b√°o tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng
      const formattedSendDate = newMail.sendDate.split("T")[0]; // Extract only the date part

      if (sendDate === todayString) {
        alert(
          `üì® Th∆∞ v·ª´a ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!\n\nN·ªôi dung: ${newMail.title}\nNg√†y g·ª≠i: ${formattedSendDate}\nNg√†y nh·∫≠n: ${newMail.receiveDate}`
        );
        navigate("/today-mails", {
          state: { mail: newMail, fromExplore: true },
        });
      } else {
        alert(
          "Th∆∞ ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë·∫øn ng√†y nh·∫≠n."
        );
      }
    } catch (error) {
      console.error("L·ªói khi g·ª≠i th∆∞:", error);
      alert("C√≥ l·ªói x·∫£y ra khi g·ª≠i th∆∞. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const renderEmotionDots = (data) => {
    return data.map((percent, index) => {
      const className = ["happy", "sad", "angry", "excited", "neutral"][index];
      return (
        <div
          key={index}
          style={{ display: "flex", alignItems: "center", margin: "5px 0" }}
        >
          <span className={`dot ${className}`} />
          <span style={{ marginLeft: "5px" }}>{percent}%</span>
        </div>
      );
    });
  };

  const renderLineChart = (data) => {
    return (
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Line
            type="monotone"
            dataKey="value"
            stroke="#8884d8"
            activeDot={{ r: 8 }}
          />
        </LineChart>
      </ResponsiveContainer>
    );
  };

  return (
    <div className="explore-container">
      <h2 className="explore-title">Yourself</h2>
      <div className="explore-tabs">
        <button
          className={activeTab === "statistics" ? "active" : ""}
          onClick={() => setActiveTab("statistics")}
        >
          Th·ªëng k√™
        </button>
        <button
          className={activeTab === "future" ? "active" : ""}
          onClick={() => setActiveTab("future")}
        >
          H·ªôp th∆∞ t∆∞∆°ng lai
        </button>
      </div>

      <div className="explore-content">
        {activeTab === "statistics" && (
          <div className="statistics-section">
            <h4>
              Th·ªëng k√™ c·∫£m x√∫c c·ªßa b·∫°n trong
              <select
                value={timeRange}
                onChange={(e) => setTimeRange(e.target.value)}
                style={{ marginLeft: "10px", padding: "5px" }}
              >
                <option value="today">h√¥m nay</option>
                <option value="week">1 tu·∫ßn</option>
                <option value="month">1 th√°ng</option>
                <option value="year">1 nƒÉm</option>
              </select>
            </h4>

            {renderLineChart(
              emotionData[timeRange].lineChart.map((item, index) => ({
                name: item.name, // Ensure name is passed correctly
                value: item.value, // Ensure value is passed correctly
              }))
            )}

            <div className="pie-chart">
              <div
                style={{
                  width: "200px",
                  height: "200px",
                  borderRadius: "50%",
                  background: `conic-gradient(
                  #7ed957 ${emotionData[timeRange].pieChart[0]}%,
                  #67c6e3 0 ${emotionData[timeRange].pieChart[0] + emotionData[timeRange].pieChart[1]}%,
                  #f15b2a 0 ${emotionData[timeRange].pieChart[0] + emotionData[timeRange].pieChart[1] + emotionData[timeRange].pieChart[2]}%,
                  #f891c5 0 ${emotionData[timeRange].pieChart[0] + emotionData[timeRange].pieChart[1] + emotionData[timeRange].pieChart[2] + emotionData[timeRange].pieChart[3]}%,
                  #ffd966 0 ${emotionData[timeRange].pieChart[0] + emotionData[timeRange].pieChart[1] + emotionData[timeRange].pieChart[2] + emotionData[timeRange].pieChart[3] + emotionData[timeRange].pieChart[4]}%
                )`,
                  margin: "0 auto",
                }}
              />
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-around",
                  marginTop: "20px",
                }}
              >
                <div>
                  {renderEmotionDots(
                    emotionData[timeRange].pieChart.slice(0, 3)
                  )}
                </div>
                <div>
                  {renderEmotionDots(emotionData[timeRange].pieChart.slice(3))}
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === "future" && (
          <div className="future-mail-section">
            <div style={{ display: "flex", gap: "20px" }}>
              <div style={{ flex: 1 }}>
                <h4>G·ª≠i th∆∞ cho ch√≠nh m√¨nh trong t∆∞∆°ng lai</h4>
                <textarea
                  placeholder="Vi·∫øt ƒëi·ªÅu b·∫°n mu·ªën nh·∫Øn g·ª≠i..."
                  value={mailContent}
                  onChange={(e) => setMailContent(e.target.value)}
                />
                <div className="future-options">
                  <label>
                    G·ª≠i v√†o:
                    <input
                      type="date"
                      value={sendDate}
                      onChange={(e) => setSendDate(e.target.value)}
                      min={new Date().toISOString().split("T")[0]}
                      style={{ marginLeft: "10px", padding: "5px" }}
                    />
                  </label>
                  <button className="send-button" onClick={handleSendMail}>
                    G·ª≠i th∆∞
                  </button>
                </div>
              </div>

              <div style={{ flex: 1 }}>
                <h4>Th∆∞ ƒë√£ g·ª≠i</h4>
                <div
                  style={{
                    maxHeight: "300px",
                    overflowY: "auto",
                    border: "1px solid #ddd",
                    borderRadius: "8px",
                    padding: "10px",
                  }}
                >
                  {futureMails.length === 0 ? (
                    <p>Ch∆∞a c√≥ th∆∞ n√†o ƒë∆∞·ª£c g·ª≠i</p>
                  ) : (
                    futureMails.map((mail) => (
                      <div
                        key={mail.id}
                        style={{
                          padding: "10px",
                          borderBottom: "1px solid #eee",
                          cursor: "pointer",
                          backgroundColor:
                            selectedDuration === mail.duration
                              ? "#f0f0f0"
                              : "transparent",
                        }}
                        onClick={() => {
                          setSelectedDuration(mail.duration);
                          alert(
                            `N·ªôi dung th∆∞:\n\n${mail.content || "Kh√¥ng c√≥ n·ªôi dung"}`
                          );
                        }}
                      >
                        <div style={{ fontWeight: "bold" }}>{mail.title}</div>
                        <div style={{ fontSize: "0.9em", color: "#666" }}>
                          G·ª≠i ƒë·∫øn: {mail.receiveDate} ({mail.duration})
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>

            <div
              style={{
                marginTop: "20px",
                padding: "15px",
                backgroundColor: "#f0f0f0",
                borderRadius: "8px",
              }}
            >
              <h4>T√πy ch·ªçn kh√°c</h4>
              <div style={{ display: "flex", gap: "15px", marginTop: "10px" }}>
                <button
                  style={{
                    padding: "8px 15px",
                    backgroundColor: "#5e5df0",
                    color: "white",
                    border: "none",
                    borderRadius: "6px",
                    cursor: "pointer",
                  }}
                  onClick={() => {
                    const futureDate = new Date();
                    futureDate.setMonth(futureDate.getMonth() + 3);
                    setSelectedDuration("3 months");
                    setMailContent("Li·ªáu 3 th√°ng nx c√≥ t·ªët h∆°n b√¢y gi·ªù ko?");
                    setSendDate(futureDate.toISOString().split("T")[0]);
                  }}
                >
                  G·ª≠i th∆∞ 3 th√°ng
                </button>
                <button
                  style={{
                    padding: "8px 15px",
                    backgroundColor: "#5e5df0",
                    color: "white",
                    border: "none",
                    borderRadius: "6px",
                    cursor: "pointer",
                  }}
                  onClick={() => {
                    const futureDate = new Date();
                    futureDate.setMonth(futureDate.getMonth() + 6);
                    setSelectedDuration("6 months");
                    setMailContent("N√≥ng s·ªë: the day");
                    setSendDate(futureDate.toISOString().split("T")[0]);
                  }}
                >
                  G·ª≠i th∆∞ 6 th√°ng
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExploreYourselfPage;
