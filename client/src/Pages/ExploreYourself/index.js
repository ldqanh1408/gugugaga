import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { addFutureMailAsync } from "../../redux/userSlice";
import { toast } from "react-toastify";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import "./ExploreYourselfPage.css";

const ExploreYourselfPage = () => {
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [selectedDate, setSelectedDate] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isRedirecting, setIsRedirecting] = useState(false);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const entity = useSelector((state) => state.auth)
  const handleSendMail = async (e) => {
    e.preventDefault();

    try {
      if (!title?.trim()) {
        toast.error("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ th∆∞");
        return;
      }
      if (!content?.trim()) {
        toast.error("Vui l√≤ng nh·∫≠p n·ªôi dung th∆∞");
        return;
      }
      if (!selectedDate) {
        toast.error("Vui l√≤ng ch·ªçn ng√†y nh·∫≠n th∆∞");
        return;
      }

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selected = new Date(selectedDate);
      selected.setHours(0, 0, 0, 0);

      if (selected < today) {
        toast.error("Kh√¥ng th·ªÉ g·ª≠i th∆∞ cho ng√†y trong qu√° kh·ª©!");
        return;
      }

      const maxDate = new Date(today);
      maxDate.setDate(today.getDate() + 30);
      if (selected > maxDate) {
        toast.error("Ch·ªâ c√≥ th·ªÉ g·ª≠i th∆∞ trong v√≤ng 30 ng√†y!");
        return;
      }

      setIsLoading(true);

      if (!entity?._id) {
        throw new Error("Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng");
      }

      const mailData = {
        title: title.trim(),
        content: content.trim(),
        sendDate: new Date(),
        receiveDate: selectedDate,
      };

      const result = await dispatch(
        addFutureMailAsync({ userId: entity._id, mailData })
      ).unwrap();

      // N·∫øu ng√†y nh·∫≠n l√† ng√†y hi·ªán t·∫°i
      if (selected.getTime() === today.getTime()) {
        toast.success("Th∆∞ ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!", {
          autoClose: 1000,
        });

        setIsRedirecting(true);
        // Hi·ªÉn th·ªã th√¥ng b√°o c√≥ th∆∞ ƒë·∫øn ngay
        toast.info("üéâ B·∫°n c√≥ th∆∞ m·ªõi! ƒêang chuy·ªÉn ƒë·∫øn trang xem th∆∞...", {
          autoClose: 2000,
          onClose: () => {
            navigate("/today-mails", {
              state: { mail: result, fromExplore: true },
            });
          },
        });
      } else {
        toast.success("üìÆ Th∆∞ ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch g·ª≠i th√†nh c√¥ng!");
        // Reset form sau khi g·ª≠i th√†nh c√¥ng
        setTitle("");
        setContent("");
        setSelectedDate(null);
      }
    } catch (error) {
      console.error("L·ªói khi g·ª≠i th∆∞:", error);
      toast.error(error.message || "C√≥ l·ªói x·∫£y ra khi g·ª≠i th∆∞.");
    } finally {
      setIsLoading(false);
    }
  };

  if (isRedirecting) {
    return (
      <div className="redirecting-container">
        <div className="loading-spinner"></div>
        <p>ƒêang chuy·ªÉn ƒë·∫øn trang xem th∆∞...</p>
      </div>
    );
  }

  return (
    <div className="explore-yourself-container">
      <h2>‚úâÔ∏è G·ª≠i th∆∞ cho hi·ªán t·∫°i v√† t∆∞∆°ng lai</h2>
      <form
        onSubmit={handleSendMail}
        className={isLoading ? "form-loading" : ""}
      >
        <div className="form-group">
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Ti√™u ƒë·ªÅ th∆∞..."
            className="title-input"
            disabled={isLoading}
          />
        </div>
        <div className="form-group">
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="N·ªôi dung th∆∞..."
            className="content-input"
            disabled={isLoading}
          />
        </div>
        <div className="form-group date-picker">
          <DatePicker
            selected={selectedDate}
            onChange={(date) => setSelectedDate(date)}
            minDate={new Date()}
            maxDate={new Date(new Date().setDate(new Date().getDate() + 30))}
            placeholderText="Ch·ªçn ng√†y nh·∫≠n th∆∞..."
            dateFormat="dd/MM/yyyy"
            className="date-input"
            disabled={isLoading}
          />
          <small className="text-muted">
            *B·∫°n c√≥ th·ªÉ ch·ªçn ng√†y nh·∫≠n th∆∞ trong v√≤ng 30 ng√†y k·ªÉ t·ª´ h√¥m nay
          </small>
        </div>
        <button type="submit" className="send-button" disabled={isLoading}>
          {isLoading ? (
            <>
              <span className="button-spinner"></span>
              ƒêang g·ª≠i...
            </>
          ) : (
            "G·ª≠i th∆∞"
          )}
        </button>
      </form>
    </div>
  );
};

export default ExploreYourselfPage;